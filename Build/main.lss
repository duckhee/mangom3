
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  20000000  08000b3c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  20000014  08000b50  00010014  2**2
                  ALLOC
  3 ._usrstack    00000100  2000001c  08000b58  00010014  2**0
                  ALLOC
  4 .debug_info   00003407  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000d43  00000000  00000000  0001341b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00002d9d  00000000  00000000  0001415e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000418  00000000  00000000  00016efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000498  00000000  00000000  00017313  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001606  00000000  00000000  000177ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001322  00000000  00000000  00018db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  0001a0d3  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  0001a143  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000938  00000000  00000000  0001a178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 0d 01 00 08 00 00 00 00 00 00 00 00     .P. ............
 8000010:	09 01 00 08 09 01 00 08 09 01 00 08 00 00 00 00     ................
	...
 800002c:	09 01 00 08 09 01 00 08 00 00 00 00 09 01 00 08     ................
 800003c:	2d 05 00 08 09 01 00 08 29 05 00 08 09 01 00 08     -.......).......
 800004c:	09 01 00 08 09 01 00 08 09 01 00 08 09 05 00 08     ................
 800005c:	0d 05 00 08 11 05 00 08 15 05 00 08 19 05 00 08     ................
 800006c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800007c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800008c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800009c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000ac:	09 01 00 08 1d 05 00 08 21 05 00 08 25 05 00 08     ........!...%...
 80000bc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000cc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000dc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
	...

08000108 <Default_Handler>:
void Default_Handler(void)
{
	/* Go into an infinite loop. */
	while (1)
	{
	}
 8000108:	e7fe      	b.n	8000108 <Default_Handler>
 800010a:	bf00      	nop

0800010c <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 800010c:	4668      	mov	r0, sp
 800010e:	f020 0107 	bic.w	r1, r0, #7
 8000112:	468d      	mov	sp, r1
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000114:	4a10      	ldr	r2, [pc, #64]	; (8000158 <zero_loop+0x16>)
 8000116:	4b11      	ldr	r3, [pc, #68]	; (800015c <zero_loop+0x1a>)
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8000118:	b501      	push	{r0, lr}
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800011a:	429a      	cmp	r2, r3
 800011c:	d20d      	bcs.n	800013a <Reset_Handler+0x2e>
 800011e:	43d0      	mvns	r0, r2
 8000120:	490f      	ldr	r1, [pc, #60]	; (8000160 <zero_loop+0x1e>)
 8000122:	4418      	add	r0, r3
 8000124:	460b      	mov	r3, r1
 8000126:	f020 0003 	bic.w	r0, r0, #3
 800012a:	3004      	adds	r0, #4
 800012c:	4408      	add	r0, r1
	{
		*(pulDest++) = *(pulSrc++);
 800012e:	f853 1b04 	ldr.w	r1, [r3], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000132:	4283      	cmp	r3, r0
	{
		*(pulDest++) = *(pulSrc++);
 8000134:	f842 1b04 	str.w	r1, [r2], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000138:	d1f9      	bne.n	800012e <Reset_Handler+0x22>
	{
		*(pulDest++) = *(pulSrc++);
	}
		__asm("  ldr     r0, =_sbss\n"
 800013a:	480b      	ldr	r0, [pc, #44]	; (8000168 <zero_loop+0x26>)
 800013c:	490b      	ldr	r1, [pc, #44]	; (800016c <zero_loop+0x2a>)
 800013e:	f04f 0200 	mov.w	r2, #0

08000142 <zero_loop>:
 8000142:	4288      	cmp	r0, r1
 8000144:	bfb8      	it	lt
 8000146:	f840 2b04 	strlt.w	r2, [r0], #4
 800014a:	dbfa      	blt.n	8000142 <zero_loop>
          "    strlt   r2, [r0], #4\n"
          "    blt     zero_loop");
        	
	
  
    main(); //jump main function
 800014c:	4b05      	ldr	r3, [pc, #20]	; (8000164 <zero_loop+0x22>)
 800014e:	4798      	blx	r3

        printf("failed load ..");

    #endif

}
 8000150:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8000154:	4685      	mov	sp, r0
 8000156:	4770      	bx	lr
 8000158:	20000000 	.word	0x20000000
 800015c:	20000014 	.word	0x20000014
 8000160:	08000b3c 	.word	0x08000b3c
 8000164:	08000a71 	.word	0x08000a71
 8000168:	20000014 	.word	0x20000014
 800016c:	2000001c 	.word	0x2000001c

08000170 <USART1_Config>:


HW_INIT_DEF void HW_Init(void);

void USART1_Config(void)
{
 8000170:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000172:	4f1b      	ldr	r7, [pc, #108]	; (80001e0 <USART1_Config+0x70>)


HW_INIT_DEF void HW_Init(void);

void USART1_Config(void)
{
 8000174:	b087      	sub	sp, #28
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);
 8000176:	4c1b      	ldr	r4, [pc, #108]	; (80001e4 <USART1_Config+0x74>)
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000178:	4638      	mov	r0, r7
 800017a:	a901      	add	r1, sp, #4
{
    //gpio port setting 

    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
 800017c:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000180:	2603      	movs	r6, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000182:	2318      	movs	r3, #24
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000184:	4d18      	ldr	r5, [pc, #96]	; (80001e8 <USART1_Config+0x78>)
{
    //gpio port setting 

    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
 8000186:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800018a:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800018e:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000192:	47a8      	blx	r5
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000194:	4638      	mov	r0, r7
 8000196:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
 8000198:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800019c:	2304      	movs	r3, #4
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800019e:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
 80001a2:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80001a6:	f88d 3007 	strb.w	r3, [sp, #7]
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
 80001aa:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80001ae:	47a8      	blx	r5
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80001b0:	2300      	movs	r3, #0
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);
 80001b2:	4620      	mov	r0, r4
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80001b4:	250c      	movs	r5, #12

    USART_Init(USART1, &USART_InitStructure);
 80001b6:	a902      	add	r1, sp, #8
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <USART1_Config+0x7c>)
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80001ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80001be:	f8ad 300e 	strh.w	r3, [sp, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80001c2:	f8ad 3010 	strh.w	r3, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80001c6:	f8ad 3014 	strh.w	r3, [sp, #20]
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
 80001ca:	9602      	str	r6, [sp, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80001cc:	f8ad 5012 	strh.w	r5, [sp, #18]

    USART_Init(USART1, &USART_InitStructure);
 80001d0:	4790      	blx	r2
   //USART_Cmd(USART1, ENABLE);
   USART1->CR1 |= ((uint16_t)0x2000);
 80001d2:	89a3      	ldrh	r3, [r4, #12]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001da:	81a3      	strh	r3, [r4, #12]
}
 80001dc:	b007      	add	sp, #28
 80001de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80001e0:	40010800 	.word	0x40010800
 80001e4:	40013800 	.word	0x40013800
 80001e8:	0800038d 	.word	0x0800038d
 80001ec:	08000449 	.word	0x08000449

080001f0 <HW_Init>:


HW_INIT_DEF void HW_Init(void)
{
 80001f0:	b510      	push	{r4, lr}
    HSE_Init();
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <HW_Init+0x28>)
 80001f4:	4798      	blx	r3
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80001f6:	2001      	movs	r0, #1
 80001f8:	4c08      	ldr	r4, [pc, #32]	; (800021c <HW_Init+0x2c>)
 80001fa:	4601      	mov	r1, r0
 80001fc:	47a0      	blx	r4
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80001fe:	2004      	movs	r0, #4
 8000200:	2101      	movs	r1, #1
 8000202:	47a0      	blx	r4
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000204:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000208:	2101      	movs	r1, #1
 800020a:	47a0      	blx	r4
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800020c:	2008      	movs	r0, #8
 800020e:	2101      	movs	r1, #1
 8000210:	47a0      	blx	r4
    USART1_Config();
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <HW_Init+0x30>)
 8000214:	4798      	blx	r3
 8000216:	bd10      	pop	{r4, pc}
 8000218:	080002e9 	.word	0x080002e9
 800021c:	080002d1 	.word	0x080002d1
 8000220:	08000171 	.word	0x08000171

08000224 <RCC_GetClocksFreq>:
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
  uint32_t prediv1factor = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS_Mask;
 8000224:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <RCC_GetClocksFreq+0x90>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
RCC_DEF void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000226:	b430      	push	{r4, r5}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
  uint32_t prediv1factor = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS_Mask;
 8000228:	6853      	ldr	r3, [r2, #4]
 800022a:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800022e:	2b04      	cmp	r3, #4
 8000230:	d038      	beq.n	80002a4 <RCC_GetClocksFreq+0x80>
 8000232:	2b08      	cmp	r3, #8
 8000234:	d025      	beq.n	8000282 <RCC_GetClocksFreq+0x5e>
 8000236:	b30b      	cbz	r3, 800027c <RCC_GetClocksFreq+0x58>
 
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000238:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <RCC_GetClocksFreq+0x94>)
      break;
 800023a:	4613      	mov	r3, r2
 
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800023c:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE_Set_Mask;
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <RCC_GetClocksFreq+0x90>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000240:	4c1e      	ldr	r4, [pc, #120]	; (80002bc <RCC_GetClocksFreq+0x98>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE_Set_Mask;
 8000242:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8000244:	4d1e      	ldr	r5, [pc, #120]	; (80002c0 <RCC_GetClocksFreq+0x9c>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8000246:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 800024a:	5c61      	ldrb	r1, [r4, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800024c:	40cb      	lsrs	r3, r1
 800024e:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1_Set_Mask;
 8000250:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8000252:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000256:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000258:	fa23 f101 	lsr.w	r1, r3, r1
 800025c:	6081      	str	r1, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2_Set_Mask;
 800025e:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8000260:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000264:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000266:	40cb      	lsrs	r3, r1
 8000268:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_ADCPRE_Set_Mask;
 800026a:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800026c:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8000270:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8000272:	bc30      	pop	{r4, r5}
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000274:	fbb3 f3f2 	udiv	r3, r3, r2
 8000278:	6103      	str	r3, [r0, #16]
}
 800027a:	4770      	bx	lr
  tmp = RCC->CFGR & RCC_CFGR_SWS_Mask;
  
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <RCC_GetClocksFreq+0x94>)
 800027e:	6003      	str	r3, [r0, #0]
      break;
 8000280:	e7dd      	b.n	800023e <RCC_GetClocksFreq+0x1a>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMull_Mask;
 8000282:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC_Mask;
 8000284:	6851      	ldr	r1, [r2, #4]
      
      pllmull = ( pllmull >> 18) + 2;
 8000286:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 800028a:	03c9      	lsls	r1, r1, #15

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC_Mask;
      
      pllmull = ( pllmull >> 18) + 2;
 800028c:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8000290:	d50b      	bpl.n	80002aa <RCC_GetClocksFreq+0x86>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000292:	6852      	ldr	r2, [r2, #4]
 8000294:	0392      	lsls	r2, r2, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8000296:	bf4c      	ite	mi
 8000298:	4a0a      	ldrmi	r2, [pc, #40]	; (80002c4 <RCC_GetClocksFreq+0xa0>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 800029a:	4a0b      	ldrpl	r2, [pc, #44]	; (80002c8 <RCC_GetClocksFreq+0xa4>)
 800029c:	fb02 f303 	mul.w	r3, r2, r3
 80002a0:	6003      	str	r3, [r0, #0]
 80002a2:	e7cc      	b.n	800023e <RCC_GetClocksFreq+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <RCC_GetClocksFreq+0xa4>)
 80002a6:	6003      	str	r3, [r0, #0]
      break;
 80002a8:	e7c9      	b.n	800023e <RCC_GetClocksFreq+0x1a>
      
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80002aa:	4a08      	ldr	r2, [pc, #32]	; (80002cc <RCC_GetClocksFreq+0xa8>)
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	6003      	str	r3, [r0, #0]
 80002b2:	e7c4      	b.n	800023e <RCC_GetClocksFreq+0x1a>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	007a1200 	.word	0x007a1200
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000000 	.word	0x20000000
 80002c4:	005b8d80 	.word	0x005b8d80
 80002c8:	00b71b00 	.word	0x00b71b00
 80002cc:	003d0900 	.word	0x003d0900

080002d0 <RCC_APB2PeriphClockCmd>:
RCC_DEF void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <RCC_APB2PeriphClockCmd+0x14>)
 80002d2:	6993      	ldr	r3, [r2, #24]
  * @retval None
  */
RCC_DEF void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  if (NewState != DISABLE)
 80002d4:	b919      	cbnz	r1, 80002de <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80002d6:	ea23 0000 	bic.w	r0, r3, r0
 80002da:	6190      	str	r0, [r2, #24]
 80002dc:	4770      	bx	lr
RCC_DEF void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80002de:	4318      	orrs	r0, r3
 80002e0:	6190      	str	r0, [r2, #24]
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <HSE_Init>:
        ; //조건을 만족하면 여기 pll 준비가 안되어 있다는 것
    }
}

RCC_DEF void HSE_Init(void)
{
 80002e8:	b410      	push	{r4}
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <HSE_Init+0x98>)
    }
}

RCC_DEF void HSE_Init(void)
{
    __IO uint32_t HSEStatus = 0;
 80002ec:	2400      	movs	r4, #0
        ; //조건을 만족하면 여기 pll 준비가 안되어 있다는 것
    }
}

RCC_DEF void HSE_Init(void)
{
 80002ee:	b083      	sub	sp, #12
    __IO uint32_t HSEStatus = 0;
 80002f0:	9401      	str	r4, [sp, #4]
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002f2:	681c      	ldr	r4, [r3, #0]
 80002f4:	4a23      	ldr	r2, [pc, #140]	; (8000384 <HSE_Init+0x9c>)
 80002f6:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002fa:	4619      	mov	r1, r3
        StartUpCounter++;
 80002fc:	4610      	mov	r0, r2
}

RCC_DEF void HSE_Init(void)
{
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	e003      	b.n	800030a <HSE_Init+0x22>
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
 8000302:	6803      	ldr	r3, [r0, #0]
 8000304:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000308:	d109      	bne.n	800031e <HSE_Init+0x36>
{
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800030a:	680b      	ldr	r3, [r1, #0]
 800030c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000310:	9301      	str	r3, [sp, #4]
        StartUpCounter++;
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	6013      	str	r3, [r2, #0]
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f1      	beq.n	8000302 <HSE_Init+0x1a>
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
     //PLL setting
    /* HCLK = SYSTICK */
    RCC->CFGR |= (uint32_t)SYSCLK_NOT_DIVIDED;
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <HSE_Init+0x98>)
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000320:	4819      	ldr	r0, [pc, #100]	; (8000388 <HSE_Init+0xa0>)
    /* PLL configuration : PLLCLK = HSE * 6 = 72MHz */
    RCC->CFGR |= (uint32_t)(PLLSRC_HSE | PLL_INPUT_MULT6);
    /* PLL ON */
    RCC->CR |= RCC_CR_PLLON;
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000322:	4619      	mov	r1, r3
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000324:	6802      	ldr	r2, [r0, #0]
 8000326:	f042 0202 	orr.w	r2, r2, #2
 800032a:	6002      	str	r2, [r0, #0]
     //PLL setting
    /* HCLK = SYSTICK */
    RCC->CFGR |= (uint32_t)SYSCLK_NOT_DIVIDED;
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	605a      	str	r2, [r3, #4]
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)APB2_PCLK2_NOT_DIVIDED;
 8000330:	685a      	ldr	r2, [r3, #4]
 8000332:	605a      	str	r2, [r3, #4]
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)APB1_PCLK1_DIVIDED2;
 8000334:	685a      	ldr	r2, [r3, #4]
 8000336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800033a:	605a      	str	r2, [r3, #4]
    /* ADC = set div 6 */
    RCC->CFGR |= (uint32_t)ADCPRE_PLCK2_DIVIDED6;
 800033c:	685a      	ldr	r2, [r3, #4]
 800033e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000342:	605a      	str	r2, [r3, #4]
    /* PLL configuration : PLLCLK = HSE * 6 = 72MHz */
    RCC->CFGR |= (uint32_t)(PLLSRC_HSE | PLL_INPUT_MULT6);
 8000344:	685a      	ldr	r2, [r3, #4]
 8000346:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 800034a:	605a      	str	r2, [r3, #4]
    /* PLL ON */
    RCC->CR |= RCC_CR_PLLON;
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000352:	601a      	str	r2, [r3, #0]
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000354:	680b      	ldr	r3, [r1, #0]
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <HSE_Init+0x98>)
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	d5fb      	bpl.n	8000354 <HSE_Init+0x6c>
    }
    /* select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)SW_PLL_SYSCLOCK;
    /* Wailt til PLL is used as system clock source */
    while((RCC->CFGR & (uint32_t)RCC_SWS_MASK) != ((uint32_t)0x08))
 800035c:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
        ;
    }
    /* select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800035e:	6853      	ldr	r3, [r2, #4]
 8000360:	f023 0303 	bic.w	r3, r3, #3
 8000364:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)SW_PLL_SYSCLOCK;
 8000366:	6853      	ldr	r3, [r2, #4]
 8000368:	f043 0302 	orr.w	r3, r3, #2
 800036c:	6053      	str	r3, [r2, #4]
    /* Wailt til PLL is used as system clock source */
    while((RCC->CFGR & (uint32_t)RCC_SWS_MASK) != ((uint32_t)0x08))
 800036e:	684b      	ldr	r3, [r1, #4]
 8000370:	f003 030c 	and.w	r3, r3, #12
 8000374:	2b08      	cmp	r3, #8
 8000376:	d1fa      	bne.n	800036e <HSE_Init+0x86>
    {
        ; //조건을 만족하면 여기 pll 준비가 안되어 있다는 것
    }
 8000378:	b003      	add	sp, #12
 800037a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000
 8000384:	20000014 	.word	0x20000014
 8000388:	40022000 	.word	0x40022000

0800038c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  /* Check the parameters */
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000390:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000392:	06eb      	lsls	r3, r5, #27
  { 
    /* Check the parameters */
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000394:	bf48      	it	mi
 8000396:	788b      	ldrbmi	r3, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000398:	8809      	ldrh	r1, [r1, #0]
{
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  /* Check the parameters */
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800039a:	f005 0e0f 	and.w	lr, r5, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800039e:	bf48      	it	mi
 80003a0:	ea4e 0e03 	orrmi.w	lr, lr, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80003a4:	f011 0fff 	tst.w	r1, #255	; 0xff
 80003a8:	d021      	beq.n	80003ee <GPIO_Init+0x62>
  {
    tmpreg = GPIOx->CRL;
 80003aa:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ac:	2300      	movs	r3, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003ae:	2701      	movs	r7, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003b0:	f04f 080f 	mov.w	r8, #15
 80003b4:	e002      	b.n	80003bc <GPIO_Init+0x30>
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003b6:	3301      	adds	r3, #1
 80003b8:	2b08      	cmp	r3, #8
 80003ba:	d017      	beq.n	80003ec <GPIO_Init+0x60>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003bc:	fa07 f203 	lsl.w	r2, r7, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003c0:	ea02 0401 	and.w	r4, r2, r1
      if (currentpin == pos)
 80003c4:	4294      	cmp	r4, r2
 80003c6:	d1f6      	bne.n	80003b6 <GPIO_Init+0x2a>
      {
        pos = pinpos << 2;
 80003c8:	009a      	lsls	r2, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003ca:	fa08 fc02 	lsl.w	ip, r8, r2
        tmpreg &= ~pinmask;
 80003ce:	ea26 060c 	bic.w	r6, r6, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003d2:	fa0e f202 	lsl.w	r2, lr, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003d6:	2d28      	cmp	r5, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003d8:	ea46 0602 	orr.w	r6, r6, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003dc:	d031      	beq.n	8000442 <GPIO_Init+0xb6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003de:	2d48      	cmp	r5, #72	; 0x48
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003e0:	f103 0301 	add.w	r3, r3, #1
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80003e4:	bf08      	it	eq
 80003e6:	6104      	streq	r4, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003e8:	2b08      	cmp	r3, #8
 80003ea:	d1e7      	bne.n	80003bc <GPIO_Init+0x30>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003ec:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003ee:	29ff      	cmp	r1, #255	; 0xff
 80003f0:	d923      	bls.n	800043a <GPIO_Init+0xae>
  {
    tmpreg = GPIOx->CRH;
 80003f2:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	2300      	movs	r3, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003f6:	2701      	movs	r7, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003f8:	f04f 0c0f 	mov.w	ip, #15
 80003fc:	e002      	b.n	8000404 <GPIO_Init+0x78>
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003fe:	3301      	adds	r3, #1
 8000400:	2b08      	cmp	r3, #8
 8000402:	d019      	beq.n	8000438 <GPIO_Init+0xac>
 8000404:	f103 0208 	add.w	r2, r3, #8
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000408:	fa07 f202 	lsl.w	r2, r7, r2
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800040c:	ea02 0401 	and.w	r4, r2, r1
      if (currentpin == pos)
 8000410:	4294      	cmp	r4, r2
 8000412:	d1f4      	bne.n	80003fe <GPIO_Init+0x72>
      {
        pos = pinpos << 2;
 8000414:	009a      	lsls	r2, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000416:	fa0c f802 	lsl.w	r8, ip, r2
        tmpreg &= ~pinmask;
 800041a:	ea26 0608 	bic.w	r6, r6, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800041e:	fa0e f202 	lsl.w	r2, lr, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000422:	2d28      	cmp	r5, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000424:	ea46 0602 	orr.w	r6, r6, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000428:	d009      	beq.n	800043e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800042a:	2d48      	cmp	r5, #72	; 0x48
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800042c:	f103 0301 	add.w	r3, r3, #1
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000430:	bf08      	it	eq
 8000432:	6104      	streq	r4, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000434:	2b08      	cmp	r3, #8
 8000436:	d1e5      	bne.n	8000404 <GPIO_Init+0x78>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000438:	6046      	str	r6, [r0, #4]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800043e:	6144      	str	r4, [r0, #20]
 8000440:	e7dd      	b.n	80003fe <GPIO_Init+0x72>
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000442:	6144      	str	r4, [r0, #20]
 8000444:	e7b7      	b.n	80003b6 <GPIO_Init+0x2a>
 8000446:	bf00      	nop

08000448 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
USART_DEF void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	4604      	mov	r4, r0
 800044c:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800044e:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= USART_CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000450:	88ca      	ldrh	r2, [r1, #6]
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000452:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= USART_CR2_STOP_CLEAR_Mask;
 8000454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000458:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800045a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800045c:	8982      	ldrh	r2, [r0, #12]
  tmpreg &= USART_CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800045e:	888b      	ldrh	r3, [r1, #4]
 8000460:	8908      	ldrh	r0, [r1, #8]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000462:	b292      	uxth	r2, r2
  tmpreg &= USART_CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000464:	8949      	ldrh	r1, [r1, #10]
 8000466:	4303      	orrs	r3, r0
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= USART_CR1_CLEAR_Mask;
 8000468:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800046c:	430b      	orrs	r3, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= USART_CR1_CLEAR_Mask;
 800046e:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000472:	4313      	orrs	r3, r2
 8000474:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000476:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000478:	8aa3      	ldrh	r3, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800047a:	89aa      	ldrh	r2, [r5, #12]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800047c:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_Mask;
 800047e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
USART_DEF void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000482:	b086      	sub	sp, #24
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000484:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000486:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000488:	a801      	add	r0, sp, #4
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <USART_Init+0xb4>)
 800048c:	4798      	blx	r3
  if (usartxbase == USART1_BASE)
 800048e:	481c      	ldr	r0, [pc, #112]	; (8000500 <USART_Init+0xb8>)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000490:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000492:	9904      	ldr	r1, [sp, #16]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 8000494:	89a2      	ldrh	r2, [r4, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000496:	4284      	cmp	r4, r0
 8000498:	bf08      	it	eq
 800049a:	460b      	moveq	r3, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 800049c:	b212      	sxth	r2, r2
 800049e:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80004a0:	682a      	ldr	r2, [r5, #0]
 80004a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004a6:	bfb4      	ite	lt
 80004a8:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80004aa:	0092      	lslge	r2, r2, #2
 80004ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004b0:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 80004b4:	4e13      	ldr	r6, [pc, #76]	; (8000504 <USART_Init+0xbc>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 80004b6:	89a5      	ldrh	r5, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80004b8:	fba6 2003 	umull	r2, r0, r6, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 80004bc:	b22d      	sxth	r5, r5
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80004be:	0940      	lsrs	r0, r0, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80004c0:	2264      	movs	r2, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 80004c2:	2d00      	cmp	r5, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80004c4:	fb00 3312 	mls	r3, r0, r2, r3
 80004c8:	ea4f 1000 	mov.w	r0, r0, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
 80004cc:	db0a      	blt.n	80004e4 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80004ce:	011a      	lsls	r2, r3, #4
 80004d0:	3232      	adds	r2, #50	; 0x32
 80004d2:	fba6 2302 	umull	r2, r3, r6, r2
 80004d6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80004da:	4303      	orrs	r3, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80004dc:	b29b      	uxth	r3, r3
 80004de:	8123      	strh	r3, [r4, #8]
}
 80004e0:	b006      	add	sp, #24
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8_Set) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80004e4:	00d9      	lsls	r1, r3, #3
 80004e6:	3132      	adds	r1, #50	; 0x32
 80004e8:	fba6 3101 	umull	r3, r1, r6, r1
 80004ec:	f3c1 1242 	ubfx	r2, r1, #5, #3
 80004f0:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	8123      	strh	r3, [r4, #8]
}
 80004f8:	b006      	add	sp, #24
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	08000225 	.word	0x08000225
 8000500:	40013800 	.word	0x40013800
 8000504:	51eb851f 	.word	0x51eb851f

08000508 <EXTI0_IRQHandler>:
HW_IRQ_DEF void PVD_IRQHandler(void);



HW_IRQ_DEF void EXTI0_IRQHandler(void)
{
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <EXTI1_IRQHandler>:

}

HW_IRQ_DEF void EXTI1_IRQHandler(void)
{
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <EXTI2_IRQHandler>:


}

HW_IRQ_DEF void EXTI2_IRQHandler(void)
{
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <EXTI3_IRQHandler>:

}

HW_IRQ_DEF void EXTI3_IRQHandler(void)
{
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <EXTI4_IRQHandler>:

}

HW_IRQ_DEF void EXTI4_IRQHandler(void)
{
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <TIM2_IRQHandler>:
    
}


HW_IRQ_DEF void TIM2_IRQHandler(void)
{
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <TIM3_IRQHandler>:


}

HW_IRQ_DEF void TIM3_IRQHandler(void)
{
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <TIM4_IRQHandler>:


}

HW_IRQ_DEF void TIM4_IRQHandler(void)
{
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <PVD_IRQHandler>:

    
}

HW_IRQ_DEF void PVD_IRQHandler(void)
{
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <SysTick_Handler>:
    return (0);
}

SYSTICK_DEF void SysTick_Handler(void)
{
    count_sys++;
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <SysTick_Handler+0x18>)
 800052e:	7813      	ldrb	r3, [r2, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	7013      	strb	r3, [r2, #0]
    if(count_sys == 100){
 8000536:	7813      	ldrb	r3, [r2, #0]
 8000538:	2b64      	cmp	r3, #100	; 0x64
        count_sys = 0;
 800053a:	bf04      	itt	eq
 800053c:	2300      	moveq	r3, #0
 800053e:	7013      	strbeq	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000018 	.word	0x20000018

08000548 <print_byte>:
#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 8000548:	280a      	cmp	r0, #10

#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
 800054a:	b510      	push	{r4, lr}
 800054c:	4604      	mov	r4, r0
    if (c == '\n') print_byte('\r');
 800054e:	d006      	beq.n	800055e <print_byte+0x16>
    while( !((*(volatile unsigned long *) 0x40013800) & 0x80) ) ;
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <print_byte+0x20>)
 8000552:	6813      	ldr	r3, [r2, #0]
 8000554:	061b      	lsls	r3, r3, #24
 8000556:	d5fc      	bpl.n	8000552 <print_byte+0xa>
    *(volatile unsigned long *) 0x40013804 = c;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <print_byte+0x24>)
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	bd10      	pop	{r4, pc}
#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 800055e:	200d      	movs	r0, #13
 8000560:	f7ff fff2 	bl	8000548 <print_byte>
 8000564:	e7f4      	b.n	8000550 <print_byte+0x8>
 8000566:	bf00      	nop
 8000568:	40013800 	.word	0x40013800
 800056c:	40013804 	.word	0x40013804

08000570 <DecToLong>:
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000570:	b1e8      	cbz	r0, 80005ae <DecToLong+0x3e>
 8000572:	7803      	ldrb	r3, [r0, #0]
 8000574:	b1db      	cbz	r3, 80005ae <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 8000576:	2300      	movs	r3, #0
 8000578:	600b      	str	r3, [r1, #0]
 800057a:	7802      	ldrb	r2, [r0, #0]
 800057c:	b1e2      	cbz	r2, 80005b8 <DecToLong+0x48>
// ���� : 10���� ���ڿ� s���� ������ ����� retval�� ����Ű�� ��ġ�� ���.
// �Ű� : s      : ��ȯ�� ���ڿ��� �ּ�.
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
 800057e:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000580:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000584:	b2e2      	uxtb	r2, r4
 8000586:	2a09      	cmp	r2, #9
 8000588:	d902      	bls.n	8000590 <DecToLong+0x20>
 800058a:	e012      	b.n	80005b2 <DecToLong+0x42>
 800058c:	2d09      	cmp	r5, #9
 800058e:	d810      	bhi.n	80005b2 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000594:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000598:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800059a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800059e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005a2:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f1      	bne.n	800058c <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80005a8:	2001      	movs	r0, #1
}        // DecToLong.
 80005aa:	bc30      	pop	{r4, r5}
 80005ac:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80005ae:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 80005b0:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80005b2:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 80005b4:	bc30      	pop	{r4, r5}
 80005b6:	4770      	bx	lr
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80005b8:	2001      	movs	r0, #1
}        // DecToLong.
 80005ba:	4770      	bx	lr

080005bc <printf>:
// �Ű� : fmt : printf()�� �����ϳ� "%s", "%c", "%d", "%x" ��� ����.
//              %d, %x�� ��쿡�� "%08x", "%8x"�� ���� ��Ÿ�� ���̿� �� ������ 0���� ä���� ���� ����.
// ��ȯ : ����.
// ���� : ����.
LD_PRINTF_DEF void printf(char *fmt, ...)
{
 80005bc:	b40f      	push	{r0, r1, r2, r3}
 80005be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c2:	b089      	sub	sp, #36	; 0x24
        int                i;
        va_list args;
        char        *s=fmt;
 80005c4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80005c8:	4ec6      	ldr	r6, [pc, #792]	; (80008e4 <printf+0x328>)
// ���� : ����.
LD_PRINTF_DEF void printf(char *fmt, ...)
{
        int                i;
        va_list args;
        char        *s=fmt;
 80005ca:	f858 5b04 	ldr.w	r5, [r8], #4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 80005ce:	7828      	ldrb	r0, [r5, #0]
 80005d0:	b3a0      	cbz	r0, 800063c <printf+0x80>
                if (*s=='%'){
 80005d2:	2825      	cmp	r0, #37	; 0x25
 80005d4:	d137      	bne.n	8000646 <printf+0x8a>
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
 80005d6:	ac08      	add	r4, sp, #32
 80005d8:	f804 0d18 	strb.w	r0, [r4, #-24]!
 80005dc:	4621      	mov	r1, r4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 80005de:	1c6b      	adds	r3, r5, #1
 80005e0:	f105 0c0a 	add.w	ip, r5, #10
 80005e4:	1b5f      	subs	r7, r3, r5
 80005e6:	469e      	mov	lr, r3
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80005e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80005ec:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80005f0:	2a01      	cmp	r2, #1
 80005f2:	f240 8095 	bls.w	8000720 <printf+0x164>
 80005f6:	2878      	cmp	r0, #120	; 0x78
 80005f8:	f000 8092 	beq.w	8000720 <printf+0x164>
 80005fc:	2873      	cmp	r0, #115	; 0x73
 80005fe:	f000 808f 	beq.w	8000720 <printf+0x164>
 8000602:	2825      	cmp	r0, #37	; 0x25
 8000604:	f000 808c 	beq.w	8000720 <printf+0x164>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 8000608:	4563      	cmp	r3, ip
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800060a:	461a      	mov	r2, r3
 800060c:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 8000610:	d1e8      	bne.n	80005e4 <printf+0x28>
 8000612:	f89e 0001 	ldrb.w	r0, [lr, #1]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 8000616:	1c55      	adds	r5, r2, #1
 8000618:	2864      	cmp	r0, #100	; 0x64
 800061a:	f000 808f 	beq.w	800073c <printf+0x180>
 800061e:	d815      	bhi.n	800064c <printf+0x90>
 8000620:	2825      	cmp	r0, #37	; 0x25
 8000622:	f000 810c 	beq.w	800083e <printf+0x282>
 8000626:	2863      	cmp	r0, #99	; 0x63
 8000628:	d1d1      	bne.n	80005ce <printf+0x12>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 800062a:	f898 0000 	ldrb.w	r0, [r8]
 800062e:	47b0      	blx	r6
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 8000630:	7828      	ldrb	r0, [r5, #0]
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 8000632:	f108 0404 	add.w	r4, r8, #4
 8000636:	46a0      	mov	r8, r4
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 8000638:	2800      	cmp	r0, #0
 800063a:	d1ca      	bne.n	80005d2 <printf+0x16>
                        s++;
                }
        }
        va_end(args);
        return;
}
 800063c:	b009      	add	sp, #36	; 0x24
 800063e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000642:	b004      	add	sp, #16
 8000644:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000646:	47b0      	blx	r6
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 8000648:	3501      	adds	r5, #1
 800064a:	e7c0      	b.n	80005ce <printf+0x12>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 800064c:	2873      	cmp	r0, #115	; 0x73
 800064e:	f000 80f8 	beq.w	8000842 <printf+0x286>
 8000652:	2878      	cmp	r0, #120	; 0x78
 8000654:	d1bb      	bne.n	80005ce <printf+0x12>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000656:	f8d8 a000 	ldr.w	sl, [r8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800065a:	f89d 3008 	ldrb.w	r3, [sp, #8]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800065e:	2700      	movs	r7, #0
 8000660:	f8cd a000 	str.w	sl, [sp]
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000664:	f108 0804 	add.w	r8, r8, #4

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000668:	9701      	str	r7, [sp, #4]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800066a:	2b00      	cmp	r3, #0
 800066c:	f000 80ff 	beq.w	800086e <printf+0x2b2>
                if (c=='x') break;
 8000670:	2b78      	cmp	r3, #120	; 0x78
 8000672:	f000 80fc 	beq.w	800086e <printf+0x2b2>
 8000676:	46bb      	mov	fp, r7
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000678:	46b9      	mov	r9, r7


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800067a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800067e:	2a08      	cmp	r2, #8
 8000680:	d84a      	bhi.n	8000718 <printf+0x15c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000682:	f814 300b 	ldrb.w	r3, [r4, fp]
 8000686:	eb04 010b 	add.w	r1, r4, fp
 800068a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800068e:	2a09      	cmp	r2, #9
 8000690:	f200 814f 	bhi.w	8000932 <printf+0x376>
 8000694:	a805      	add	r0, sp, #20
 8000696:	4686      	mov	lr, r0
 8000698:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 800069a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800069e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 80006a2:	f10b 0b01 	add.w	fp, fp, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80006a6:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80006aa:	f1bc 0f09 	cmp.w	ip, #9
 80006ae:	f102 0201 	add.w	r2, r2, #1
 80006b2:	d9f2      	bls.n	800069a <printf+0xde>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80006b4:	ab08      	add	r3, sp, #32
 80006b6:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80006b8:	a901      	add	r1, sp, #4
 80006ba:	4b8b      	ldr	r3, [pc, #556]	; (80008e8 <printf+0x32c>)
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80006bc:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 80006c0:	f10b 3bff 	add.w	fp, fp, #4294967295
                        DecToLong(tol, &flagcnt);
 80006c4:	4798      	blx	r3
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 80006c6:	f10b 0b01 	add.w	fp, fp, #1
 80006ca:	ab08      	add	r3, sp, #32
 80006cc:	445b      	add	r3, fp
 80006ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80006d2:	b10b      	cbz	r3, 80006d8 <printf+0x11c>
                if (c=='x') break;
 80006d4:	2b78      	cmp	r3, #120	; 0x78
 80006d6:	d1d0      	bne.n	800067a <printf+0xbe>
 80006d8:	9b01      	ldr	r3, [sp, #4]
 80006da:	fa9a f28a 	rev.w	r2, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 80006de:	9200      	str	r2, [sp, #0]
        
        // ���� flag�� ���� ���.
        if (flagcnt){
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f000 80c7 	beq.w	8000874 <printf+0x2b8>
                if (flagcnt&0x01){        // flagcnt�� Ȧ�� �϶�, upper�� ����, lower�� ���.
 80006e6:	07da      	lsls	r2, r3, #31
 80006e8:	f140 812c 	bpl.w	8000944 <printf+0x388>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
 80006ec:	f1c3 0307 	rsb	r3, r3, #7
 80006f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80006f4:	aa08      	add	r2, sp, #32
 80006f6:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
 80006fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
                        if (lHex!=0) leading_zero=false;
 80006fe:	f013 030f 	ands.w	r3, r3, #15
 8000702:	f000 815a 	beq.w	80009ba <printf+0x3fe>
                        if (lHex<10) lHex+='0';
 8000706:	2b09      	cmp	r3, #9
 8000708:	f240 8175 	bls.w	80009f6 <printf+0x43a>
                        else         lHex+='A'-10;
 800070c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000710:	47b0      	blx	r6
 8000712:	f04f 0900 	mov.w	r9, #0
 8000716:	e155      	b.n	80009c4 <printf+0x408>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000718:	2b30      	cmp	r3, #48	; 0x30
 800071a:	bf08      	it	eq
 800071c:	2701      	moveq	r7, #1
 800071e:	e7d2      	b.n	80006c6 <printf+0x10a>
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
 8000720:	4672      	mov	r2, lr
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000722:	ab08      	add	r3, sp, #32
 8000724:	441f      	add	r7, r3
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 8000726:	2864      	cmp	r0, #100	; 0x64
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
 8000728:	f04f 0300 	mov.w	r3, #0
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 800072c:	f807 0c18 	strb.w	r0, [r7, #-24]
                                        format[i] = '\0';
 8000730:	f807 3c17 	strb.w	r3, [r7, #-23]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 8000734:	f102 0501 	add.w	r5, r2, #1
 8000738:	f47f af71 	bne.w	800061e <printf+0x62>
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800073c:	f89d 3008 	ldrb.w	r3, [sp, #8]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
 8000740:	2200      	movs	r2, #0
 8000742:	9201      	str	r2, [sp, #4]
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000744:	f108 0a04 	add.w	sl, r8, #4
 8000748:	f8d8 b000 	ldr.w	fp, [r8]
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800074c:	2b00      	cmp	r3, #0
 800074e:	f000 80c4 	beq.w	80008da <printf+0x31e>
                if (c=='d') break;
 8000752:	2b64      	cmp	r3, #100	; 0x64
 8000754:	f000 80c1 	beq.w	80008da <printf+0x31e>
 8000758:	4690      	mov	r8, r2
 800075a:	4617      	mov	r7, r2
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800075c:	4691      	mov	r9, r2


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 800075e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000762:	2a08      	cmp	r2, #8
 8000764:	d87e      	bhi.n	8000864 <printf+0x2a8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000766:	5de3      	ldrb	r3, [r4, r7]
 8000768:	19e1      	adds	r1, r4, r7
 800076a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800076e:	2a09      	cmp	r2, #9
 8000770:	f200 80dc 	bhi.w	800092c <printf+0x370>
 8000774:	a805      	add	r0, sp, #20
 8000776:	4686      	mov	lr, r0
 8000778:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 800077a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800077e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 8000782:	3701      	adds	r7, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000784:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000788:	f1bc 0f09 	cmp.w	ip, #9
 800078c:	f102 0201 	add.w	r2, r2, #1
 8000790:	d9f3      	bls.n	800077a <printf+0x1be>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000792:	ab08      	add	r3, sp, #32
 8000794:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000796:	a901      	add	r1, sp, #4
 8000798:	4b53      	ldr	r3, [pc, #332]	; (80008e8 <printf+0x32c>)
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800079a:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 800079e:	3f01      	subs	r7, #1
                        DecToLong(tol, &flagcnt);
 80007a0:	4798      	blx	r3
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 80007a2:	3701      	adds	r7, #1
 80007a4:	ab08      	add	r3, sp, #32
 80007a6:	443b      	add	r3, r7
 80007a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007ac:	b10b      	cbz	r3, 80007b2 <printf+0x1f6>
                if (c=='d') break;
 80007ae:	2b64      	cmp	r3, #100	; 0x64
 80007b0:	d1d5      	bne.n	800075e <printf+0x1a2>
                else continue;
        }


        // ���� flag�� ���� ���.
        if (flagcnt){
 80007b2:	9801      	ldr	r0, [sp, #4]
 80007b4:	2800      	cmp	r0, #0
 80007b6:	f000 8090 	beq.w	80008da <printf+0x31e>
                if (flagcnt>9) flagcnt=9;
 80007ba:	2809      	cmp	r0, #9
 80007bc:	f340 80bc 	ble.w	8000938 <printf+0x37c>
 80007c0:	2009      	movs	r0, #9
 80007c2:	9001      	str	r0, [sp, #4]
 80007c4:	2206      	movs	r2, #6
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007c6:	2107      	movs	r1, #7


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 80007c8:	230a      	movs	r3, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007ca:	3901      	subs	r1, #1
                retval *= num;
 80007cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007d0:	1c4c      	adds	r4, r1, #1
                retval *= num;
 80007d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007d6:	d1f8      	bne.n	80007ca <printf+0x20e>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 80007d8:	fb9b f7f3 	sdiv	r7, fp, r3
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007dc:	2802      	cmp	r0, #2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 80007de:	fb03 b717 	mls	r7, r3, r7, fp
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007e2:	f000 8106 	beq.w	80009f2 <printf+0x436>
 80007e6:	4613      	mov	r3, r2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 80007e8:	240a      	movs	r4, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007ea:	3b01      	subs	r3, #1
                retval *= num;
 80007ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007f0:	1c59      	adds	r1, r3, #1
                retval *= num;
 80007f2:	ea4f 0444 	mov.w	r4, r4, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 80007f6:	d1f8      	bne.n	80007ea <printf+0x22e>
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
 80007f8:	4643      	mov	r3, r8
 80007fa:	f04f 0901 	mov.w	r9, #1
 80007fe:	46a8      	mov	r8, r5
 8000800:	461d      	mov	r5, r3
 8000802:	e010      	b.n	8000826 <printf+0x26a>
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000804:	2c01      	cmp	r4, #1
 8000806:	d016      	beq.n	8000836 <printf+0x27a>


                        if (leading_zero==true){
 8000808:	f1b9 0f00 	cmp.w	r9, #0
 800080c:	d013      	beq.n	8000836 <printf+0x27a>
                                if (flag0)        print_byte('0');
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	b905      	cbnz	r5, 8000814 <printf+0x258>
                                else                print_byte(' ');
 8000812:	2020      	movs	r0, #32
 8000814:	47b0      	blx	r6
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <printf+0x330>)
 8000818:	fb83 2304 	smull	r2, r3, r3, r4
 800081c:	17e4      	asrs	r4, r4, #31
 800081e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000822:	2c00      	cmp	r4, #0
 8000824:	dd7f      	ble.n	8000926 <printf+0x36a>
                        result = remainder/divisor;
 8000826:	fb97 f3f4 	sdiv	r3, r7, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800082e:	fb04 7713 	mls	r7, r4, r3, r7


                        if (result!=0 || divisor==1) leading_zero = false;
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0e6      	beq.n	8000804 <printf+0x248>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000836:	47b0      	blx	r6
 8000838:	f04f 0900 	mov.w	r9, #0
 800083c:	e7eb      	b.n	8000816 <printf+0x25a>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 800083e:	47b0      	blx	r6
 8000840:	e6c5      	b.n	80005ce <printf+0x12>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 8000842:	f8d8 4000 	ldr.w	r4, [r8]
 8000846:	f108 0804 	add.w	r8, r8, #4
        }
        return;
}

void PrintString(char *fmt, char *s){
        if (!fmt || !s) return;
 800084a:	2c00      	cmp	r4, #0
 800084c:	f43f aebf 	beq.w	80005ce <printf+0x12>
        while (*s) print_byte(*s++);
 8000850:	7820      	ldrb	r0, [r4, #0]
 8000852:	2800      	cmp	r0, #0
 8000854:	f43f aebb 	beq.w	80005ce <printf+0x12>
 8000858:	47b0      	blx	r6
 800085a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800085e:	2800      	cmp	r0, #0
 8000860:	d1fa      	bne.n	8000858 <printf+0x29c>
 8000862:	e6b4      	b.n	80005ce <printf+0x12>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000864:	2b30      	cmp	r3, #48	; 0x30
 8000866:	bf08      	it	eq
 8000868:	f04f 0801 	moveq.w	r8, #1
 800086c:	e799      	b.n	80007a2 <printf+0x1e6>
 800086e:	fa9a f38a 	rev.w	r3, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	46e9      	mov	r9, sp
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000876:	f819 3b01 	ldrb.w	r3, [r9], #1
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 800087a:	2201      	movs	r2, #1
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800087c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000880:	091b      	lsrs	r3, r3, #4
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000882:	f04f 0700 	mov.w	r7, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000886:	d019      	beq.n	80008bc <printf+0x300>
                        if (uHex<10) uHex+='0';
 8000888:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800088a:	bf88      	it	hi
 800088c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000890:	f240 80b7 	bls.w	8000a02 <printf+0x446>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000894:	47b0      	blx	r6
 8000896:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000898:	b9b4      	cbnz	r4, 80008c8 <printf+0x30c>
 800089a:	2f03      	cmp	r7, #3
 800089c:	f000 80b4 	beq.w	8000a08 <printf+0x44c>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 80b0 	beq.w	8000a08 <printf+0x44c>
                        }
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 80008a8:	3701      	adds	r7, #1
 80008aa:	2f04      	cmp	r7, #4
 80008ac:	f43f ae8f 	beq.w	80005ce <printf+0x12>
                        c = s[i];
 80008b0:	f819 3b01 	ldrb.w	r3, [r9], #1
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80008b4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	d1e5      	bne.n	8000888 <printf+0x2cc>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 80008bc:	2a00      	cmp	r2, #0
 80008be:	f000 80a0 	beq.w	8000a02 <printf+0x446>
 80008c2:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d0e8      	beq.n	800089a <printf+0x2de>
                        if (lHex<10) lHex+='0';
 80008c8:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 80008ca:	bf88      	it	hi
 80008cc:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80008d0:	f240 809a 	bls.w	8000a08 <printf+0x44c>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 80008d4:	47b0      	blx	r6
 80008d6:	2200      	movs	r2, #0
 80008d8:	e7e6      	b.n	80008a8 <printf+0x2ec>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 80008da:	270a      	movs	r7, #10
 80008dc:	2201      	movs	r2, #1
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <printf+0x334>)
 80008e0:	e013      	b.n	800090a <printf+0x34e>
 80008e2:	bf00      	nop
 80008e4:	08000549 	.word	0x08000549
 80008e8:	08000571 	.word	0x08000571
 80008ec:	66666667 	.word	0x66666667
 80008f0:	3b9aca00 	.word	0x3b9aca00
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80008f4:	47b0      	blx	r6
 80008f6:	2200      	movs	r2, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80008f8:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <printf+0x454>)
 80008fa:	3f01      	subs	r7, #1
 80008fc:	fb83 1304 	smull	r1, r3, r3, r4
 8000900:	ea4f 74e4 	mov.w	r4, r4, asr #31
 8000904:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000908:	d00e      	beq.n	8000928 <printf+0x36c>
                        result = remainder/divisor;
 800090a:	fb9b f3f4 	sdiv	r3, fp, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000912:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1ec      	bne.n	80008f4 <printf+0x338>
 800091a:	2c01      	cmp	r4, #1
 800091c:	d0ea      	beq.n	80008f4 <printf+0x338>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800091e:	2a00      	cmp	r2, #0
 8000920:	d0e8      	beq.n	80008f4 <printf+0x338>
 8000922:	2201      	movs	r2, #1
 8000924:	e7e8      	b.n	80008f8 <printf+0x33c>
 8000926:	4645      	mov	r5, r8
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000928:	46d0      	mov	r8, sl
 800092a:	e650      	b.n	80005ce <printf+0x12>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800092c:	2200      	movs	r2, #0
 800092e:	a805      	add	r0, sp, #20
 8000930:	e72f      	b.n	8000792 <printf+0x1d6>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000932:	2200      	movs	r2, #0
 8000934:	a805      	add	r0, sp, #20
 8000936:	e6bd      	b.n	80006b4 <printf+0xf8>
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000938:	2801      	cmp	r0, #1
 800093a:	f1a0 0102 	sub.w	r1, r0, #2
 800093e:	d04a      	beq.n	80009d6 <printf+0x41a>
 8000940:	1ec2      	subs	r2, r0, #3
 8000942:	e741      	b.n	80007c8 <printf+0x20c>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000944:	f04f 0901 	mov.w	r9, #1
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000948:	f1c3 0308 	rsb	r3, r3, #8
 800094c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000950:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8000954:	f1ba 0f03 	cmp.w	sl, #3
 8000958:	f73f ae39 	bgt.w	80005ce <printf+0x12>
 800095c:	46ab      	mov	fp, r5
 800095e:	44ea      	add	sl, sp
 8000960:	ac01      	add	r4, sp, #4
                        c = s[i];
 8000962:	f81a 3b01 	ldrb.w	r3, [sl], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000966:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	d009      	beq.n	8000982 <printf+0x3c6>
                        if (uHex<10) uHex+='0';
 800096e:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000970:	bf88      	it	hi
 8000972:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000976:	d941      	bls.n	80009fc <printf+0x440>
                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000978:	47b0      	blx	r6
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 800097a:	b97d      	cbnz	r5, 800099c <printf+0x3e0>
                        if (lHex<10) lHex+='0';
 800097c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000980:	e010      	b.n	80009a4 <printf+0x3e8>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits ���.
                        if (leading_zero){
 8000982:	f1b9 0f00 	cmp.w	r9, #0
 8000986:	d039      	beq.n	80009fc <printf+0x440>
                                if (flag0) print_byte('0');
 8000988:	b187      	cbz	r7, 80009ac <printf+0x3f0>
 800098a:	2030      	movs	r0, #48	; 0x30
 800098c:	47b0      	blx	r6
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 800098e:	b92d      	cbnz	r5, 800099c <printf+0x3e0>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000990:	2030      	movs	r0, #48	; 0x30
 8000992:	47b0      	blx	r6
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000994:	45a2      	cmp	sl, r4
 8000996:	d1e4      	bne.n	8000962 <printf+0x3a6>
 8000998:	465d      	mov	r5, fp
 800099a:	e618      	b.n	80005ce <printf+0x12>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800099c:	2d09      	cmp	r5, #9
 800099e:	d9ed      	bls.n	800097c <printf+0x3c0>
                        else         lHex+='A'-10;
 80009a0:	f105 0037 	add.w	r0, r5, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 80009a4:	47b0      	blx	r6
 80009a6:	f04f 0900 	mov.w	r9, #0
 80009aa:	e7f3      	b.n	8000994 <printf+0x3d8>


                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 80009ac:	2020      	movs	r0, #32
 80009ae:	47b0      	blx	r6
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d1f3      	bne.n	800099c <printf+0x3e0>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 80009b4:	2020      	movs	r0, #32
 80009b6:	47b0      	blx	r6
 80009b8:	e7ec      	b.n	8000994 <printf+0x3d8>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 80009ba:	b13f      	cbz	r7, 80009cc <printf+0x410>
 80009bc:	2030      	movs	r0, #48	; 0x30
 80009be:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80009c0:	f04f 0901 	mov.w	r9, #1
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 80009c4:	9b01      	ldr	r3, [sp, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	e7bd      	b.n	8000948 <printf+0x38c>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 80009cc:	2020      	movs	r0, #32
 80009ce:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80009d0:	f04f 0901 	mov.w	r9, #1
 80009d4:	e7f6      	b.n	80009c4 <printf+0x408>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <printf+0x454>)
 80009d8:	fb83 370b 	smull	r3, r7, r3, fp
 80009dc:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80009e0:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
 80009e4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80009e8:	ebab 0743 	sub.w	r7, fp, r3, lsl #1
 80009ec:	f06f 0301 	mvn.w	r3, #1
 80009f0:	e6fa      	b.n	80007e8 <printf+0x22c>
        while (*s) print_byte(*s++);
        return;
}

int Power(int num, int cnt){
        long retval=num;
 80009f2:	240a      	movs	r4, #10
 80009f4:	e700      	b.n	80007f8 <printf+0x23c>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 80009f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80009fa:	e689      	b.n	8000710 <printf+0x154>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80009fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000a00:	e7ba      	b.n	8000978 <printf+0x3bc>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000a02:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000a06:	e745      	b.n	8000894 <printf+0x2d8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000a08:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000a0c:	e762      	b.n	80008d4 <printf+0x318>
 8000a0e:	bf00      	nop
 8000a10:	66666667 	.word	0x66666667

08000a14 <System_Information>:


extern __IO uint32_t StartUpCounter;

 void System_Information(void)
{
 8000a14:	b510      	push	{r4, lr}

    RCC_ClocksTypeDef  rcc_clocks;
    printf("StartUpCounter : %d\n", StartUpCounter);
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <System_Information+0x38>)


extern __IO uint32_t StartUpCounter;

 void System_Information(void)
{
 8000a18:	b086      	sub	sp, #24

    RCC_ClocksTypeDef  rcc_clocks;
    printf("StartUpCounter : %d\n", StartUpCounter);
 8000a1a:	4c0d      	ldr	r4, [pc, #52]	; (8000a50 <System_Information+0x3c>)
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <System_Information+0x40>)
 8000a20:	47a0      	blx	r4
    RCC_GetClocksFreq(&rcc_clocks);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <System_Information+0x44>)
 8000a24:	a801      	add	r0, sp, #4
 8000a26:	4798      	blx	r3
    printf("SYSCLK_Frequency = %d\n",rcc_clocks.SYSCLK_Frequency );
 8000a28:	9901      	ldr	r1, [sp, #4]
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <System_Information+0x48>)
 8000a2c:	47a0      	blx	r4
    printf("HCLK_Frequency = %d\n",rcc_clocks.HCLK_Frequency );
 8000a2e:	9902      	ldr	r1, [sp, #8]
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <System_Information+0x4c>)
 8000a32:	47a0      	blx	r4
    printf("PCLK1_Frequency = %d\n",rcc_clocks.PCLK1_Frequency );
 8000a34:	9903      	ldr	r1, [sp, #12]
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <System_Information+0x50>)
 8000a38:	47a0      	blx	r4
    printf("PCLK2_Frequency = %d\n",rcc_clocks.PCLK2_Frequency );
 8000a3a:	9904      	ldr	r1, [sp, #16]
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <System_Information+0x54>)
 8000a3e:	47a0      	blx	r4
    printf("ADCCLK_Frequency = %d\n",rcc_clocks.ADCCLK_Frequency );
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <System_Information+0x58>)
 8000a42:	9905      	ldr	r1, [sp, #20]
 8000a44:	47a0      	blx	r4
}
 8000a46:	b006      	add	sp, #24
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000014 	.word	0x20000014
 8000a50:	080005bd 	.word	0x080005bd
 8000a54:	08000aa4 	.word	0x08000aa4
 8000a58:	08000225 	.word	0x08000225
 8000a5c:	08000abc 	.word	0x08000abc
 8000a60:	08000ad4 	.word	0x08000ad4
 8000a64:	08000aec 	.word	0x08000aec
 8000a68:	08000b04 	.word	0x08000b04
 8000a6c:	08000b1c 	.word	0x08000b1c

08000a70 <main>:

int main()
{
 8000a70:	b500      	push	{lr}
    RCC_ClocksTypeDef rcc_clocks;
    HW_Init();
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <main+0x20>)
    printf("PCLK2_Frequency = %d\n",rcc_clocks.PCLK2_Frequency );
    printf("ADCCLK_Frequency = %d\n",rcc_clocks.ADCCLK_Frequency );
}

int main()
{
 8000a74:	b087      	sub	sp, #28
    RCC_ClocksTypeDef rcc_clocks;
    HW_Init();
 8000a76:	4798      	blx	r3
    RCC_GetClocksFreq(&rcc_clocks);
 8000a78:	a801      	add	r0, sp, #4
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <main+0x24>)
 8000a7c:	4798      	blx	r3
    System_Information();
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <main+0x28>)
 8000a80:	4798      	blx	r3
    printf("testing");
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <main+0x2c>)
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <main+0x30>)
 8000a86:	4798      	blx	r3
 8000a88:	2000      	movs	r0, #0
 8000a8a:	b007      	add	sp, #28
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a90:	080001f1 	.word	0x080001f1
 8000a94:	08000225 	.word	0x08000225
 8000a98:	08000a15 	.word	0x08000a15
 8000a9c:	08000b34 	.word	0x08000b34
 8000aa0:	080005bd 	.word	0x080005bd
 8000aa4:	72617453 	.word	0x72617453
 8000aa8:	43705574 	.word	0x43705574
 8000aac:	746e756f 	.word	0x746e756f
 8000ab0:	3a207265 	.word	0x3a207265
 8000ab4:	0a642520 	.word	0x0a642520
 8000ab8:	00000000 	.word	0x00000000
 8000abc:	43535953 	.word	0x43535953
 8000ac0:	465f4b4c 	.word	0x465f4b4c
 8000ac4:	75716572 	.word	0x75716572
 8000ac8:	79636e65 	.word	0x79636e65
 8000acc:	25203d20 	.word	0x25203d20
 8000ad0:	00000a64 	.word	0x00000a64
 8000ad4:	4b4c4348 	.word	0x4b4c4348
 8000ad8:	6572465f 	.word	0x6572465f
 8000adc:	6e657571 	.word	0x6e657571
 8000ae0:	3d207963 	.word	0x3d207963
 8000ae4:	0a642520 	.word	0x0a642520
 8000ae8:	00000000 	.word	0x00000000
 8000aec:	4b4c4350 	.word	0x4b4c4350
 8000af0:	72465f31 	.word	0x72465f31
 8000af4:	65757165 	.word	0x65757165
 8000af8:	2079636e 	.word	0x2079636e
 8000afc:	6425203d 	.word	0x6425203d
 8000b00:	0000000a 	.word	0x0000000a
 8000b04:	4b4c4350 	.word	0x4b4c4350
 8000b08:	72465f32 	.word	0x72465f32
 8000b0c:	65757165 	.word	0x65757165
 8000b10:	2079636e 	.word	0x2079636e
 8000b14:	6425203d 	.word	0x6425203d
 8000b18:	0000000a 	.word	0x0000000a
 8000b1c:	43434441 	.word	0x43434441
 8000b20:	465f4b4c 	.word	0x465f4b4c
 8000b24:	75716572 	.word	0x75716572
 8000b28:	79636e65 	.word	0x79636e65
 8000b2c:	25203d20 	.word	0x25203d20
 8000b30:	00000a64 	.word	0x00000a64
 8000b34:	74736574 	.word	0x74736574
 8000b38:	00676e69 	.word	0x00676e69
